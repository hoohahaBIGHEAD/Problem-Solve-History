
#include <iostream>
#include <sstream>
#include "Logger.h"
#include "FileManage.h"

using namespace std;
int main()
{
    /// <summary>
    /// log 파일 셋팅
    /// 3. 프로그램의 로그 생성 위치와 로그의 prefix 설정
    /// 프로그램이 시작하는 main()함수의 첫번째라인에 LOGsetInfo()호출함.
    /// LOGsetInfo(로그 생성할 디렉토리, 로그파일명); 함수로 설정함.
    /// </summary>
    /// <returns></returns>
    LOGsetInfo(".", "test");
    Logger myLog = Logger::log_create(  __FILE__, 
                                        __func__, 
                                        Mode::All, 
                                        LogType::Debug | 
                                        LogType::Error | 
                                        LogType::Event | 
                                        LogType::Warning);
    myLog.log_print(LogType::Event, "test debug start!", __LINE__);
    
    string str = "Hello World!\n";
    std::cout << str;
    myLog.log_print(LogType::Debug, "str = " + str, __LINE__);
    int* pinteger;
    int integer = 0;
    pinteger = &integer;
    ostringstream oss;
    oss << pinteger;
    string address_pinteger = oss.str();
    myLog.log_print(LogType::Error, "dangling pointer Error! pointer : " + address_pinteger, __LINE__);
    delete pinteger;
}
// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
